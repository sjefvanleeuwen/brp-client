//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace HaalCentraal.BrpBevragen
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IBrpClient
    {
        /// <param name="expand">Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/expand.feature)</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="burgerservicenummer">Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn.</param>
        /// <param name="geboorte__datum">Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature)</param>
        /// <param name="geboorte__plaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <param name="geslachtsaanduiding">Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is.</param>
        /// <param name="inclusiefoverledenpersonen">Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature)</param>
        /// <param name="naam__geslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <param name="naam__voornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <param name="verblijfplaats__gemeentevaninschrijving">Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter.</param>
        /// <param name="verblijfplaats__huisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken.</param>
        /// <param name="verblijfplaats__huisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999.</param>
        /// <param name="verblijfplaats__huisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9</param>
        /// <param name="verblijfplaats__identificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige 'gemeentecode' , de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</param>
        /// <param name="verblijfplaats__naamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard</param>
        /// <param name="verblijfplaats__postcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer</param>
        /// <param name="naam__voorvoegsel">Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IngeschrevenPersoonHalCollectie> IngeschrevenNatuurlijkPersonenAsync(string expand, string fields, System.Collections.Generic.IEnumerable<string> burgerservicenummer, System.DateTimeOffset? geboorte__datum, string geboorte__plaats, Geslacht_enum? geslachtsaanduiding, bool? inclusiefoverledenpersonen, string naam__geslachtsnaam, string naam__voornamen, string verblijfplaats__gemeentevaninschrijving, string verblijfplaats__huisletter, int? verblijfplaats__huisnummer, string verblijfplaats__huisnummertoevoeging, string verblijfplaats__identificatiecodenummeraanduiding, string verblijfplaats__naamopenbareruimte, string verblijfplaats__postcode, string naam__voorvoegsel);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="expand">Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/expand.feature)</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="burgerservicenummer">Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn.</param>
        /// <param name="geboorte__datum">Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature)</param>
        /// <param name="geboorte__plaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <param name="geslachtsaanduiding">Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is.</param>
        /// <param name="inclusiefoverledenpersonen">Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature)</param>
        /// <param name="naam__geslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <param name="naam__voornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <param name="verblijfplaats__gemeentevaninschrijving">Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter.</param>
        /// <param name="verblijfplaats__huisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken.</param>
        /// <param name="verblijfplaats__huisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999.</param>
        /// <param name="verblijfplaats__huisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9</param>
        /// <param name="verblijfplaats__identificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige 'gemeentecode' , de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</param>
        /// <param name="verblijfplaats__naamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard</param>
        /// <param name="verblijfplaats__postcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer</param>
        /// <param name="naam__voorvoegsel">Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IngeschrevenPersoonHalCollectie> IngeschrevenNatuurlijkPersonenAsync(string expand, string fields, System.Collections.Generic.IEnumerable<string> burgerservicenummer, System.DateTimeOffset? geboorte__datum, string geboorte__plaats, Geslacht_enum? geslachtsaanduiding, bool? inclusiefoverledenpersonen, string naam__geslachtsnaam, string naam__voornamen, string verblijfplaats__gemeentevaninschrijving, string verblijfplaats__huisletter, int? verblijfplaats__huisnummer, string verblijfplaats__huisnummertoevoeging, string verblijfplaats__identificatiecodenummeraanduiding, string verblijfplaats__naamopenbareruimte, string verblijfplaats__postcode, string naam__voorvoegsel, System.Threading.CancellationToken cancellationToken);

        /// <param name="expand">Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/expand.feature)</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IngeschrevenPersoonHal> IngeschrevenNatuurlijkPersoonAsync(string burgerservicenummer, string expand, string fields);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="expand">Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/expand.feature)</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IngeschrevenPersoonHal> IngeschrevenNatuurlijkPersoonAsync(string burgerservicenummer, string expand, string fields, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">De identificatie van het kind.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<KindHal> IngeschrevenpersonenBurgerservicenummerkinderenIdAsync(string burgerservicenummer, string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">De identificatie van het kind.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<KindHal> IngeschrevenpersonenBurgerservicenummerkinderenIdAsync(string burgerservicenummer, string id, System.Threading.CancellationToken cancellationToken);

        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<KindHalCollectie> IngeschrevenpersonenBurgerservicenummerkinderenAsync(string burgerservicenummer);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<KindHalCollectie> IngeschrevenpersonenBurgerservicenummerkinderenAsync(string burgerservicenummer, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">De identificatie van de ouder.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OuderHal> IngeschrevenpersonenBurgerservicenummeroudersIdAsync(string burgerservicenummer, string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">De identificatie van de ouder.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OuderHal> IngeschrevenpersonenBurgerservicenummeroudersIdAsync(string burgerservicenummer, string id, System.Threading.CancellationToken cancellationToken);

        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OuderHalCollectie> IngeschrevenpersonenBurgerservicenummeroudersAsync(string burgerservicenummer);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OuderHalCollectie> IngeschrevenpersonenBurgerservicenummeroudersAsync(string burgerservicenummer, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">De identificatie van de partner.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartnerHal> IngeschrevenpersonenBurgerservicenummerpartnersIdAsync(string burgerservicenummer, string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">De identificatie van de partner.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartnerHal> IngeschrevenpersonenBurgerservicenummerpartnersIdAsync(string burgerservicenummer, string id, System.Threading.CancellationToken cancellationToken);

        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartnerHalCollectie> IngeschrevenpersonenBurgerservicenummerpartnersAsync(string burgerservicenummer);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartnerHalCollectie> IngeschrevenpersonenBurgerservicenummerpartnersAsync(string burgerservicenummer, System.Threading.CancellationToken cancellationToken);

        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VerblijfplaatshistorieHalCollectie> GetverblijfplaatshistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VerblijfplaatshistorieHalCollectie> GetverblijfplaatshistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet, System.Threading.CancellationToken cancellationToken);

        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartnerhistorieHalCollectie> GetpartnerhistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartnerhistorieHalCollectie> GetpartnerhistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet, System.Threading.CancellationToken cancellationToken);

        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VerblijfstitelhistorieHalCollectie> GetverblijfstitelhistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VerblijfstitelhistorieHalCollectie> GetverblijfstitelhistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet, System.Threading.CancellationToken cancellationToken);

        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NationaliteithistorieHalCollectie> GetnationaliteithistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NationaliteithistorieHalCollectie> GetnationaliteithistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BrpClient : IBrpClient
    {
        private string _baseUrl = "https://virtserver.swaggerhub.com/VNGRealisatie/api/bevragingen_ingeschreven_personen";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public BrpClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _baseUrl = httpClient.BaseAddress.ToString();
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="expand">Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/expand.feature)</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="burgerservicenummer">Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn.</param>
        /// <param name="geboorte__datum">Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature)</param>
        /// <param name="geboorte__plaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <param name="geslachtsaanduiding">Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is.</param>
        /// <param name="inclusiefoverledenpersonen">Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature)</param>
        /// <param name="naam__geslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <param name="naam__voornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <param name="verblijfplaats__gemeentevaninschrijving">Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter.</param>
        /// <param name="verblijfplaats__huisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken.</param>
        /// <param name="verblijfplaats__huisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999.</param>
        /// <param name="verblijfplaats__huisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9</param>
        /// <param name="verblijfplaats__identificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige 'gemeentecode' , de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</param>
        /// <param name="verblijfplaats__naamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard</param>
        /// <param name="verblijfplaats__postcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer</param>
        /// <param name="naam__voorvoegsel">Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IngeschrevenPersoonHalCollectie> IngeschrevenNatuurlijkPersonenAsync(string expand, string fields, System.Collections.Generic.IEnumerable<string> burgerservicenummer, System.DateTimeOffset? geboorte__datum, string geboorte__plaats, Geslacht_enum? geslachtsaanduiding, bool? inclusiefoverledenpersonen, string naam__geslachtsnaam, string naam__voornamen, string verblijfplaats__gemeentevaninschrijving, string verblijfplaats__huisletter, int? verblijfplaats__huisnummer, string verblijfplaats__huisnummertoevoeging, string verblijfplaats__identificatiecodenummeraanduiding, string verblijfplaats__naamopenbareruimte, string verblijfplaats__postcode, string naam__voorvoegsel)
        {
            return IngeschrevenNatuurlijkPersonenAsync(expand, fields, burgerservicenummer, geboorte__datum, geboorte__plaats, geslachtsaanduiding, inclusiefoverledenpersonen, naam__geslachtsnaam, naam__voornamen, verblijfplaats__gemeentevaninschrijving, verblijfplaats__huisletter, verblijfplaats__huisnummer, verblijfplaats__huisnummertoevoeging, verblijfplaats__identificatiecodenummeraanduiding, verblijfplaats__naamopenbareruimte, verblijfplaats__postcode, naam__voorvoegsel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="expand">Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/expand.feature)</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="burgerservicenummer">Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn.</param>
        /// <param name="geboorte__datum">Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature)</param>
        /// <param name="geboorte__plaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <param name="geslachtsaanduiding">Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is.</param>
        /// <param name="inclusiefoverledenpersonen">Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature)</param>
        /// <param name="naam__geslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <param name="naam__voornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <param name="verblijfplaats__gemeentevaninschrijving">Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter.</param>
        /// <param name="verblijfplaats__huisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken.</param>
        /// <param name="verblijfplaats__huisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999.</param>
        /// <param name="verblijfplaats__huisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9</param>
        /// <param name="verblijfplaats__identificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige 'gemeentecode' , de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</param>
        /// <param name="verblijfplaats__naamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard</param>
        /// <param name="verblijfplaats__postcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer</param>
        /// <param name="naam__voorvoegsel">Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IngeschrevenPersoonHalCollectie> IngeschrevenNatuurlijkPersonenAsync(string expand, string fields, System.Collections.Generic.IEnumerable<string> burgerservicenummer, System.DateTimeOffset? geboorte__datum, string geboorte__plaats, Geslacht_enum? geslachtsaanduiding, bool? inclusiefoverledenpersonen, string naam__geslachtsnaam, string naam__voornamen, string verblijfplaats__gemeentevaninschrijving, string verblijfplaats__huisletter, int? verblijfplaats__huisnummer, string verblijfplaats__huisnummertoevoeging, string verblijfplaats__identificatiecodenummeraanduiding, string verblijfplaats__naamopenbareruimte, string verblijfplaats__postcode, string naam__voorvoegsel, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ingeschrevenpersonen?");
            if (expand != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expand") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expand, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (burgerservicenummer != null)
            {
                foreach (var item_ in burgerservicenummer) { urlBuilder_.Append(System.Uri.EscapeDataString("burgerservicenummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (geboorte__datum != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("geboorte__datum") + "=").Append(System.Uri.EscapeDataString(geboorte__datum.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (geboorte__plaats != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("geboorte__plaats") + "=").Append(System.Uri.EscapeDataString(ConvertToString(geboorte__plaats, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (geslachtsaanduiding != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("geslachtsaanduiding") + "=").Append(System.Uri.EscapeDataString(ConvertToString(geslachtsaanduiding, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inclusiefoverledenpersonen != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("inclusiefoverledenpersonen") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inclusiefoverledenpersonen, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (naam__geslachtsnaam != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("naam__geslachtsnaam") + "=").Append(System.Uri.EscapeDataString(ConvertToString(naam__geslachtsnaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (naam__voornamen != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("naam__voornamen") + "=").Append(System.Uri.EscapeDataString(ConvertToString(naam__voornamen, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (verblijfplaats__gemeentevaninschrijving != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("verblijfplaats__gemeentevaninschrijving") + "=").Append(System.Uri.EscapeDataString(ConvertToString(verblijfplaats__gemeentevaninschrijving, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (verblijfplaats__huisletter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("verblijfplaats__huisletter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(verblijfplaats__huisletter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (verblijfplaats__huisnummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("verblijfplaats__huisnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(verblijfplaats__huisnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (verblijfplaats__huisnummertoevoeging != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("verblijfplaats__huisnummertoevoeging") + "=").Append(System.Uri.EscapeDataString(ConvertToString(verblijfplaats__huisnummertoevoeging, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (verblijfplaats__identificatiecodenummeraanduiding != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("verblijfplaats__identificatiecodenummeraanduiding") + "=").Append(System.Uri.EscapeDataString(ConvertToString(verblijfplaats__identificatiecodenummeraanduiding, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (verblijfplaats__naamopenbareruimte != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("verblijfplaats__naamopenbareruimte") + "=").Append(System.Uri.EscapeDataString(ConvertToString(verblijfplaats__naamopenbareruimte, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (verblijfplaats__postcode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("verblijfplaats__postcode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(verblijfplaats__postcode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (naam__voorvoegsel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("naam__voorvoegsel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(naam__voorvoegsel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IngeschrevenPersoonHalCollectie>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="expand">Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/expand.feature)</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IngeschrevenPersoonHal> IngeschrevenNatuurlijkPersoonAsync(string burgerservicenummer, string expand, string fields)
        {
            return IngeschrevenNatuurlijkPersoonAsync(burgerservicenummer, expand, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="expand">Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/expand.feature)</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IngeschrevenPersoonHal> IngeschrevenNatuurlijkPersoonAsync(string burgerservicenummer, string expand, string fields, System.Threading.CancellationToken cancellationToken)
        {
            if (burgerservicenummer == null)
                throw new System.ArgumentNullException("burgerservicenummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ingeschrevenpersonen/{burgerservicenummer}?");
            urlBuilder_.Replace("{burgerservicenummer}", System.Uri.EscapeDataString(ConvertToString(burgerservicenummer, System.Globalization.CultureInfo.InvariantCulture)));
            if (expand != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expand") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expand, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IngeschrevenPersoonHal>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="id">De identificatie van het kind.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<KindHal> IngeschrevenpersonenBurgerservicenummerkinderenIdAsync(string burgerservicenummer, string id)
        {
            return IngeschrevenpersonenBurgerservicenummerkinderenIdAsync(burgerservicenummer, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">De identificatie van het kind.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<KindHal> IngeschrevenpersonenBurgerservicenummerkinderenIdAsync(string burgerservicenummer, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (burgerservicenummer == null)
                throw new System.ArgumentNullException("burgerservicenummer");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ingeschrevenpersonen/{burgerservicenummer}/kinderen/{id}");
            urlBuilder_.Replace("{burgerservicenummer}", System.Uri.EscapeDataString(ConvertToString(burgerservicenummer, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KindHal>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<KindHalCollectie> IngeschrevenpersonenBurgerservicenummerkinderenAsync(string burgerservicenummer)
        {
            return IngeschrevenpersonenBurgerservicenummerkinderenAsync(burgerservicenummer, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<KindHalCollectie> IngeschrevenpersonenBurgerservicenummerkinderenAsync(string burgerservicenummer, System.Threading.CancellationToken cancellationToken)
        {
            if (burgerservicenummer == null)
                throw new System.ArgumentNullException("burgerservicenummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ingeschrevenpersonen/{burgerservicenummer}/kinderen");
            urlBuilder_.Replace("{burgerservicenummer}", System.Uri.EscapeDataString(ConvertToString(burgerservicenummer, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KindHalCollectie>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="id">De identificatie van de ouder.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OuderHal> IngeschrevenpersonenBurgerservicenummeroudersIdAsync(string burgerservicenummer, string id)
        {
            return IngeschrevenpersonenBurgerservicenummeroudersIdAsync(burgerservicenummer, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">De identificatie van de ouder.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OuderHal> IngeschrevenpersonenBurgerservicenummeroudersIdAsync(string burgerservicenummer, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (burgerservicenummer == null)
                throw new System.ArgumentNullException("burgerservicenummer");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ingeschrevenpersonen/{burgerservicenummer}/ouders/{id}");
            urlBuilder_.Replace("{burgerservicenummer}", System.Uri.EscapeDataString(ConvertToString(burgerservicenummer, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OuderHal>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OuderHalCollectie> IngeschrevenpersonenBurgerservicenummeroudersAsync(string burgerservicenummer)
        {
            return IngeschrevenpersonenBurgerservicenummeroudersAsync(burgerservicenummer, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OuderHalCollectie> IngeschrevenpersonenBurgerservicenummeroudersAsync(string burgerservicenummer, System.Threading.CancellationToken cancellationToken)
        {
            if (burgerservicenummer == null)
                throw new System.ArgumentNullException("burgerservicenummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ingeschrevenpersonen/{burgerservicenummer}/ouders");
            urlBuilder_.Replace("{burgerservicenummer}", System.Uri.EscapeDataString(ConvertToString(burgerservicenummer, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OuderHalCollectie>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="id">De identificatie van de partner.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartnerHal> IngeschrevenpersonenBurgerservicenummerpartnersIdAsync(string burgerservicenummer, string id)
        {
            return IngeschrevenpersonenBurgerservicenummerpartnersIdAsync(burgerservicenummer, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">De identificatie van de partner.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PartnerHal> IngeschrevenpersonenBurgerservicenummerpartnersIdAsync(string burgerservicenummer, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (burgerservicenummer == null)
                throw new System.ArgumentNullException("burgerservicenummer");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ingeschrevenpersonen/{burgerservicenummer}/partners/{id}");
            urlBuilder_.Replace("{burgerservicenummer}", System.Uri.EscapeDataString(ConvertToString(burgerservicenummer, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PartnerHal>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartnerHalCollectie> IngeschrevenpersonenBurgerservicenummerpartnersAsync(string burgerservicenummer)
        {
            return IngeschrevenpersonenBurgerservicenummerpartnersAsync(burgerservicenummer, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PartnerHalCollectie> IngeschrevenpersonenBurgerservicenummerpartnersAsync(string burgerservicenummer, System.Threading.CancellationToken cancellationToken)
        {
            if (burgerservicenummer == null)
                throw new System.ArgumentNullException("burgerservicenummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ingeschrevenpersonen/{burgerservicenummer}/partners");
            urlBuilder_.Replace("{burgerservicenummer}", System.Uri.EscapeDataString(ConvertToString(burgerservicenummer, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PartnerHalCollectie>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VerblijfplaatshistorieHalCollectie> GetverblijfplaatshistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet)
        {
            return GetverblijfplaatshistorieAsync(burgerservicenummer, fields, peildatum, datumvan, datumtotenmet, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VerblijfplaatshistorieHalCollectie> GetverblijfplaatshistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet, System.Threading.CancellationToken cancellationToken)
        {
            if (burgerservicenummer == null)
                throw new System.ArgumentNullException("burgerservicenummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ingeschrevenpersonen/{burgerservicenummer}/verblijfplaatshistorie?");
            urlBuilder_.Replace("{burgerservicenummer}", System.Uri.EscapeDataString(ConvertToString(burgerservicenummer, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (peildatum != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peildatum") + "=").Append(System.Uri.EscapeDataString(peildatum.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumvan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumvan") + "=").Append(System.Uri.EscapeDataString(datumvan.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumtotenmet != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumtotenmet") + "=").Append(System.Uri.EscapeDataString(datumtotenmet.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VerblijfplaatshistorieHalCollectie>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartnerhistorieHalCollectie> GetpartnerhistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet)
        {
            return GetpartnerhistorieAsync(burgerservicenummer, fields, peildatum, datumvan, datumtotenmet, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PartnerhistorieHalCollectie> GetpartnerhistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet, System.Threading.CancellationToken cancellationToken)
        {
            if (burgerservicenummer == null)
                throw new System.ArgumentNullException("burgerservicenummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ingeschrevenpersonen/{burgerservicenummer}/partnerhistorie?");
            urlBuilder_.Replace("{burgerservicenummer}", System.Uri.EscapeDataString(ConvertToString(burgerservicenummer, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (peildatum != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peildatum") + "=").Append(System.Uri.EscapeDataString(peildatum.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumvan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumvan") + "=").Append(System.Uri.EscapeDataString(datumvan.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumtotenmet != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumtotenmet") + "=").Append(System.Uri.EscapeDataString(datumtotenmet.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PartnerhistorieHalCollectie>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VerblijfstitelhistorieHalCollectie> GetverblijfstitelhistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet)
        {
            return GetverblijfstitelhistorieAsync(burgerservicenummer, fields, peildatum, datumvan, datumtotenmet, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VerblijfstitelhistorieHalCollectie> GetverblijfstitelhistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet, System.Threading.CancellationToken cancellationToken)
        {
            if (burgerservicenummer == null)
                throw new System.ArgumentNullException("burgerservicenummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ingeschrevenpersonen/{burgerservicenummer}/verblijfstitelhistorie?");
            urlBuilder_.Replace("{burgerservicenummer}", System.Uri.EscapeDataString(ConvertToString(burgerservicenummer, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (peildatum != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peildatum") + "=").Append(System.Uri.EscapeDataString(peildatum.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumvan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumvan") + "=").Append(System.Uri.EscapeDataString(datumvan.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumtotenmet != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumtotenmet") + "=").Append(System.Uri.EscapeDataString(datumtotenmet.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VerblijfstitelhistorieHalCollectie>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<NationaliteithistorieHalCollectie> GetnationaliteithistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet)
        {
            return GetnationaliteithistorieAsync(burgerservicenummer, fields, peildatum, datumvan, datumtotenmet, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fields">Geeft de mogelijkheid de inhoud van de body van het antwoord naar behoefte aan te passen. Bevat een door komma's gescheiden lijst van veldennamen. Als niet-bestaande veldnamen worden meegegeven wordt een 400 Bad Request teruggegeven. Wanneer de parameter fields niet is opgenomen, worden alle gedefinieerde velden die een waarde hebben teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/fields.feature)</param>
        /// <param name="peildatum">De datum waarop de resource wordt opgevraagd.</param>
        /// <param name="datumvan">De begindatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <param name="datumtotenmet">De einddatum van de periode waarover de resource wordt opgevraagd.</param>
        /// <returns>Zoekactie geslaagd</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<NationaliteithistorieHalCollectie> GetnationaliteithistorieAsync(string burgerservicenummer, string fields, System.DateTimeOffset? peildatum, System.DateTimeOffset? datumvan, System.DateTimeOffset? datumtotenmet, System.Threading.CancellationToken cancellationToken)
        {
            if (burgerservicenummer == null)
                throw new System.ArgumentNullException("burgerservicenummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ingeschrevenpersonen/{burgerservicenummer}/nationaliteithistorie?");
            urlBuilder_.Replace("{burgerservicenummer}", System.Uri.EscapeDataString(ConvertToString(burgerservicenummer, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (peildatum != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peildatum") + "=").Append(System.Uri.EscapeDataString(peildatum.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumvan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumvan") + "=").Append(System.Uri.EscapeDataString(datumvan.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (datumtotenmet != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("datumtotenmet") + "=").Append(System.Uri.EscapeDataString(datumtotenmet.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NationaliteithistorieHalCollectie>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequestFoutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<BadRequestFoutbericht>("Bad Request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Acceptable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Conflict", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Gone", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "415")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Unsupported Media Type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "429")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Too Many Requests", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Internal Server Error", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "501")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Not Implemented", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Service Unavailable", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Foutbericht>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Foutbericht>("Er is een onverwachte fout opgetreden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }

    /// <summary>Gegevens over de ingeschreven persoon. 
    /// * **datumEersteInschrijving** : Datum van eerste inschrijving in de GBA</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IngeschrevenPersoon
    {
        [Newtonsoft.Json.JsonProperty("burgerservicenummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength = 9)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]*$")]
        public string Burgerservicenummer { get; set; }

        /// <summary>Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.</summary>
        [Newtonsoft.Json.JsonProperty("geheimhoudingPersoonsgegevens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GeheimhoudingPersoonsgegevens { get; set; }

        [Newtonsoft.Json.JsonProperty("geslachtsaanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Geslacht_enum Geslachtsaanduiding { get; set; }

        /// <summary>Leeftijd in jaren op het moment van bevraging</summary>
        [Newtonsoft.Json.JsonProperty("leeftijd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(int.MinValue, 999)]
        public int Leeftijd { get; set; }

        [Newtonsoft.Json.JsonProperty("datumEersteInschrijvingGBA", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumEersteInschrijvingGBA { get; set; }

        [Newtonsoft.Json.JsonProperty("kiesrecht", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Kiesrecht Kiesrecht { get; set; }

        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NaamPersoon Naam { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersoonInOnderzoek InOnderzoek { get; set; }

        [Newtonsoft.Json.JsonProperty("nationaliteit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Nationaliteit> Nationaliteit { get; set; }

        [Newtonsoft.Json.JsonProperty("geboorte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geboorte Geboorte { get; set; }

        [Newtonsoft.Json.JsonProperty("opschortingBijhouding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpschortingBijhouding OpschortingBijhouding { get; set; }

        [Newtonsoft.Json.JsonProperty("overlijden", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overlijden Overlijden { get; set; }

        [Newtonsoft.Json.JsonProperty("verblijfplaats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Verblijfplaats Verblijfplaats { get; set; }

        [Newtonsoft.Json.JsonProperty("gezagsverhouding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Gezagsverhouding Gezagsverhouding { get; set; }

        [Newtonsoft.Json.JsonProperty("verblijfstitel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Verblijfstitel Verblijfstitel { get; set; }

        [Newtonsoft.Json.JsonProperty("reisdocumenten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Reisdocumenten { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IngeschrevenPersoonHalCollectie
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalCollectionLinks _links { get; set; }

        [Newtonsoft.Json.JsonProperty("_embedded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IngeschrevenPersoonHalCollectie__embedded _embedded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IngeschrevenPersoonHal : IngeschrevenPersoon
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IngeschrevenPersoon_links _links { get; set; }

        [Newtonsoft.Json.JsonProperty("_embedded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IngeschrevenPersoon_embedded _embedded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over de ouder van de ingeschrevene. 
    /// * **datumIngangFamilierechtelijkeBetrekking** : De datum waarop de familierechtelijke betrekking is ontstaan.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Ouder
    {
        [Newtonsoft.Json.JsonProperty("burgerservicenummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength = 9)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]*$")]
        public string Burgerservicenummer { get; set; }

        [Newtonsoft.Json.JsonProperty("geslachtsaanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Geslacht_enum Geslachtsaanduiding { get; set; }

        [Newtonsoft.Json.JsonProperty("ouderAanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OuderAanduiding_enum OuderAanduiding { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangFamilierechtelijkeBetrekking", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangFamilierechtelijkeBetrekking { get; set; }

        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Naam Naam { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OuderInOnderzoek InOnderzoek { get; set; }

        [Newtonsoft.Json.JsonProperty("geboorte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geboorte Geboorte { get; set; }

        /// <summary>Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.</summary>
        [Newtonsoft.Json.JsonProperty("geheimhoudingPersoonsgegevens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GeheimhoudingPersoonsgegevens { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OuderHalCollectie
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalCollectionLinks _links { get; set; }

        [Newtonsoft.Json.JsonProperty("_embedded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OuderHalCollectie__embedded _embedded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OuderHal : Ouder
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ouder_links _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over een kind van de ingeschrevene.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Kind
    {
        [Newtonsoft.Json.JsonProperty("burgerservicenummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength = 9)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]*$")]
        public string Burgerservicenummer { get; set; }

        /// <summary>Leeftijd op het moment van bevragen</summary>
        [Newtonsoft.Json.JsonProperty("leeftijd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(int.MinValue, 999)]
        public int Leeftijd { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public KindInOnderzoek InOnderzoek { get; set; }

        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Naam Naam { get; set; }

        [Newtonsoft.Json.JsonProperty("geboorte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geboorte Geboorte { get; set; }

        /// <summary>Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.</summary>
        [Newtonsoft.Json.JsonProperty("geheimhoudingPersoonsgegevens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GeheimhoudingPersoonsgegevens { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KindHalCollectie
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalCollectionLinks _links { get; set; }

        [Newtonsoft.Json.JsonProperty("_embedded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public KindHalCollectie__embedded _embedded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KindHal : Kind
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Kind_links _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over een gesloten huwelijk/geregistreerd partnerschap van de ingeschrevene.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Partner
    {
        [Newtonsoft.Json.JsonProperty("burgerservicenummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength = 9)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]*$")]
        public string Burgerservicenummer { get; set; }

        [Newtonsoft.Json.JsonProperty("geslachtsaanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Geslacht_enum Geslachtsaanduiding { get; set; }

        [Newtonsoft.Json.JsonProperty("soortVerbintenis", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SoortVerbintenis_enum SoortVerbintenis { get; set; }

        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Naam Naam { get; set; }

        [Newtonsoft.Json.JsonProperty("geboorte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geboorte Geboorte { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartnerInOnderzoek InOnderzoek { get; set; }

        [Newtonsoft.Json.JsonProperty("aangaanHuwelijkPartnerschap", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AangaanHuwelijkPartnerschap AangaanHuwelijkPartnerschap { get; set; }

        /// <summary>Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.</summary>
        [Newtonsoft.Json.JsonProperty("geheimhoudingPersoonsgegevens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GeheimhoudingPersoonsgegevens { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PartnerHalCollectie
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalCollectionLinks _links { get; set; }

        [Newtonsoft.Json.JsonProperty("_embedded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartnerHalCollectie__embedded _embedded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PartnerHal : Partner
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Partner_links _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over de naam van de NATUURLIJK PERSOON 
    /// * **adellijketitelPredikaat** : Tabel Adellijke titel/predikaat, die aangeeft welke titel of welk predikaat behoort tot de naam (bij adellijke titel geslachtsnaam, bij predikaat voornaam).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Naam
    {
        /// <summary>De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst.</summary>
        [Newtonsoft.Json.JsonProperty("geslachtsnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Geslachtsnaam { get; set; }

        /// <summary>De voorletters waarmee een persoon aangeschreven wil worden. De voorlettes zijn afgeleid van de voornamen.</summary>
        [Newtonsoft.Json.JsonProperty("voorletters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Voorletters { get; set; }

        /// <summary>De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat.</summary>
        [Newtonsoft.Json.JsonProperty("voornamen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Voornamen { get; set; }

        /// <summary>Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam.</summary>
        [Newtonsoft.Json.JsonProperty("voorvoegsel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Voorvoegsel { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NaamInOnderzoek InOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>In onderzoekgroep om aan te geven of gegevens over de naam van de Ingeschreven persoon in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/in_onderzoek.feature)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NaamInOnderzoek
    {
        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("geslachtsnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Geslachtsnaam { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("voornamen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Voornamen { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("voorvoegsel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Voorvoegsel { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Indicators over het in onderzoek zijn van gegevens over de aangaan van het huwelijk van de INGESCHREVEN PERSOON. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/in_onderzoek.feature)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OuderInOnderzoek
    {
        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("burgerservicenummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Burgerservicenummer { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("datumIngangFamilierechtelijkeBetrekking", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DatumIngangFamilierechtelijkeBetrekking { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("geslachtsaanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Geslachtsaanduiding { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over de geboorte van respectievelijk de persoon, de ouder, de echtgenoot/geregistreerd partner, de eerdere echtgenoot/geregistreerd partner of het kind. 
    /// * **datum** : Datum waarop de persoon is geboren. 
    /// * **land** : Land waar de persoon is geboren 
    /// * **plaats** : De plaats waar een persoon is geboren. Voor een plaats buiten Nederland is gemeentecode=1999 (RNI) en gemeentenaam de buitenlandse plaatsnaam of aanduiding.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Geboorte : Geboortedatum
    {
        [Newtonsoft.Json.JsonProperty("land", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel Land { get; set; }

        [Newtonsoft.Json.JsonProperty("plaats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel Plaats { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeboorteInOnderzoek InOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Indicators over het in onderzoek zijn van gegevens over de geboorte van de INGESCHREVEN NATUURLIJK PERSOON. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/in_onderzoek.feature)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GeboorteInOnderzoek
    {
        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("datum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Datum { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("land", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Land { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("plaats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Plaats { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over het kiesrecht van de ingeschreven persoon. 
    /// * **datumUitsluitingEuropeesKiesrecht**: De datum waarop een uitsluiting voor deelname aan verkiezingen voor het Europees parlement niet meer van toepassing is, als er sprake is van uitsluiting voor bepaalde tijd. 
    /// * **datumUitsluitingKiesrecht**: De datum waarop een uitsluiting voor deelname aan verkiezingen niet meer van toepassing is, als er sprake is van uitsluiting voor bepaalde tijd.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Kiesrecht
    {
        /// <summary>Een aanduiding die aangeeft of de persoon een oproep moet ontvangen voor verkiezingen voor het Europees parlement. 
        /// * true: persoon ontvangt een oproep</summary>
        [Newtonsoft.Json.JsonProperty("europeesKiesrecht", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EuropeesKiesrecht { get; set; }

        /// <summary>Een aanduiding die aangeeft of de persoon is uitgesloten van kiesrecht.
        /// * true: persoon is uitgesloten</summary>
        [Newtonsoft.Json.JsonProperty("uitgeslotenVanKiesrecht", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UitgeslotenVanKiesrecht { get; set; }

        [Newtonsoft.Json.JsonProperty("einddatumUitsluitingEuropeesKiesrecht", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig EinddatumUitsluitingEuropeesKiesrecht { get; set; }

        [Newtonsoft.Json.JsonProperty("einddatumUitsluitingKiesrecht", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig EinddatumUitsluitingKiesrecht { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over de naam van de persoon</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NaamPersoon : Naam
    {
        /// <summary>De aanhef zoals die in een brief, gericht aan een persoon gebruikt kan worden.</summary>
        [Newtonsoft.Json.JsonProperty("aanhef", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Aanhef { get; set; }

        /// <summary>Samengestelde naam zoals die in communicatie met de persoon gebruikt kan worden.</summary>
        [Newtonsoft.Json.JsonProperty("aanschrijfwijze", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Aanschrijfwijze { get; set; }

        /// <summary>De naam zoals die in lopende tekst gebruikt kan worden.</summary>
        [Newtonsoft.Json.JsonProperty("gebruikInLopendeTekst", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GebruikInLopendeTekst { get; set; }

        [Newtonsoft.Json.JsonProperty("aanduidingNaamgebruik", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Naamgebruik_enum AanduidingNaamgebruik { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een groep van booleans om aan te geven welke gegevens van de ingeschreven persoon in onderzoek zijn. Er kunnen ook categorieën in onderzoek zijn. Als een hele categorie in onderzoek is worden alle rubrieken binnen die categorie op _true_ gezet. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/in_onderzoek.feature) .</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PersoonInOnderzoek
    {
        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("burgerservicenummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Burgerservicenummer { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("geslachtsaanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Geslachtsaanduiding { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over een nationaliteit van de ingeschrevene. 
    /// * **datumIngangGeldigheid** : De datum waarop de gegevens over deze nationaliteit geldig zijn geworden. 
    /// * **nationaliteit**: Een aanduiding van de nationaliteit die de ingeschreven persoon bezit. 
    /// * **redenOpname** : De reden op grond waarvan de ingeschreven persoon de nationaliteit verkregen heeft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Nationaliteit
    {
        [Newtonsoft.Json.JsonProperty("aanduidingBijzonderNederlanderschap", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AanduidingBijzonderNederlanderschap_enum AanduidingBijzonderNederlanderschap { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangGeldigheid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangGeldigheid { get; set; }

        [Newtonsoft.Json.JsonProperty("nationaliteit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel Nationaliteit1 { get; set; }

        [Newtonsoft.Json.JsonProperty("redenOpname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel RedenOpname { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NationaliteitInOnderzoek InOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een groep van booleans om aan te geven welke gegevens van de nationaliteit in onderzoek zijn. Als een de categorie in onderzoek is worden alle rubrieken binnen die categorie op _true_ gezet. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/in_onderzoek.feature)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NationaliteitInOnderzoek
    {
        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("aanduidingBijzonderNederlanderschap", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AanduidingBijzonderNederlanderschap { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("nationaliteit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Nationaliteit { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("redenOpname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RedenOpname { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NationaliteithistorieHalCollectie
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalCollectionLinks _links { get; set; }

        [Newtonsoft.Json.JsonProperty("_embedded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NationaliteithistorieHalCollectie__embedded _embedded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>&lt;body&gt;&lt;p&gt;Gegevens over de verblijfsrechtelijke status van de ingeschrevene.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datumEinde**: Datum waarop de geldigheid van de gegevens over de Nationaliteit is beeindigd.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datumIngang**: Datum waarop de gegevens over de Nationaliteit geldig zijn geworden.&lt;/p&gt;&lt;p&gt; &lt;em&gt;*&lt;/em&gt; aanduiding** : Nationaliteittabel, die aangeeft over welke verblijfsrechtelijke status de ingeschrevene beschikt.&lt;/p&gt; &lt;/body&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Nationaliteithistorie : Nationaliteit
    {
        /// <summary>Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.</summary>
        [Newtonsoft.Json.JsonProperty("geheimhoudingPersoonsgegevens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GeheimhoudingPersoonsgegevens { get; set; }

        [Newtonsoft.Json.JsonProperty("datumEindeGeldigheid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumEindeGeldigheid { get; set; }

        [Newtonsoft.Json.JsonProperty("redenBeeindigen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel RedenBeeindigen { get; set; }

        /// <summary>Een aanduiding dat de nationaliteit beeindigd is.</summary>
        [Newtonsoft.Json.JsonProperty("indicatieNationaliteitBeeindigd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IndicatieNationaliteitBeeindigd { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>
    /// * **reden**: Een aanduiding van de reden waarom de bijhouding van de PL is opgeschort. 
    /// * **datum**: De datum waarop de bijhouding van de persoonslijst is gestaakt. 
    /// * Indien er wel een redenOpschortingBijhouding is maar er wordt geen datumOpschortingBijhouding geleverd, dan is dat datumOpschortingBijhouding onbekend.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OpschortingBijhouding
    {
        [Newtonsoft.Json.JsonProperty("reden", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RedenOpschortingBijhouding_enum Reden { get; set; }

        [Newtonsoft.Json.JsonProperty("datum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig Datum { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over het overlijden van de ingeschreven persoon. 
    /// * **datum** : Datum waarop de persoon is overleden. 
    /// * **land** : Land waar de persoon is overleden 
    /// * **plaats** : De plaats waar een persoon is overleden. Voor een plaats buiten Nederland is gemeentecode=1999 (RNI) en gemeentenaam de buitenlandse plaatsnaam of aanduiding.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Overlijden
    {
        /// <summary>Deze indicatie heeft als rol om aan te geven dat iemand is overleden (waarde true). Deze indicator wordt altijd meegeleverd als de waarde true is (dus als iemand overleden is). Als de waarde false is wordt de indicator niet meegeleverd.</summary>
        [Newtonsoft.Json.JsonProperty("indicatieOverleden", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IndicatieOverleden { get; set; }

        [Newtonsoft.Json.JsonProperty("datum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig Datum { get; set; }

        [Newtonsoft.Json.JsonProperty("land", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel Land { get; set; }

        [Newtonsoft.Json.JsonProperty("plaats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel Plaats { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverlijdenInOnderzoek InOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>In onderzoek indicators voor gegevens over het overlijden van de ingeschreven natuurlijk persoon. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/in_onderzoek.feature)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OverlijdenInOnderzoek
    {
        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("datum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Datum { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("land", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Land { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("plaats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Plaats { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Indicators over het in onderzoek zijn van gegevens over de aangaan van het huwelijk van de INGESCHREVEN PERSOON. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/in_onderzoek.feature)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KindInOnderzoek
    {
        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("burgerservicenummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Burgerservicenummer { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Indicators over het in onderzoek zijn van gegevens over de aangaan van het huwelijk van de INGESCHREVEN PERSOON. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/in_onderzoek.feature)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PartnerInOnderzoek
    {
        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("burgerservicenummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Burgerservicenummer { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("geslachtsaanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Geslachtsaanduiding { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("soortVerbintenis", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SoortVerbintenis { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over het gesloten huwelijk of het aangegane geregistreerd partnerschap. 
    /// * **datum** : De datum waarop het huwelijk is voltrokken of het partnerschap is aangegaan. 
    /// * **land** : Het land waar het huwelijk is voltrokken of het partnerschap is aangegaan. 
    /// * **plaats** : Als de plaats een gemeente in Nederland is dan gewoon de gemeentecode + gemeentenaam . Voor een plaats buiten Nederland is de gemeentecode leeg en wordt de gemeentenaam de buitenlandse plaatsnaam of aanduiding.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AangaanHuwelijkPartnerschap
    {
        [Newtonsoft.Json.JsonProperty("datum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig Datum { get; set; }

        [Newtonsoft.Json.JsonProperty("land", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel Land { get; set; }

        [Newtonsoft.Json.JsonProperty("plaats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel Plaats { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AangaanHuwelijkInOnderzoek InOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Indicators over het in onderzoek zijn van gegevens over de aangaan van het huwelijk van de INGESCHREVEN PERSOON. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/in_onderzoek.feature)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AangaanHuwelijkInOnderzoek
    {
        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("datum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Datum { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("land", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Land { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("plaats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Plaats { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Dit object bevat de basis Verblijfsplaats kenmerken die gedeeld worden door Bewoning en Verblijfplaats
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BinnenlandsAdres
    {
        [Newtonsoft.Json.JsonProperty("functieAdres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SoortAdres_enum FunctieAdres { get; set; }

        /// <summary>Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. a - z , A – Z</summary>
        [Newtonsoft.Json.JsonProperty("huisletter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z,a-z]$")]
        public string Huisletter { get; set; }

        /// <summary>Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999.</summary>
        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(int.MinValue, 99999)]
        public int Huisnummer { get; set; }

        /// <summary>Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9</summary>
        [Newtonsoft.Json.JsonProperty("huisnummertoevoeging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]{1,4}$")]
        public string Huisnummertoevoeging { get; set; }

        [Newtonsoft.Json.JsonProperty("aanduidingBijHuisnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AanduidingBijHuisnummer_enum AanduidingBijHuisnummer { get; set; }

        /// <summary>De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige 'gemeentecode' de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</summary>
        [Newtonsoft.Json.JsonProperty("identificatiecodeNummeraanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string IdentificatiecodeNummeraanduiding { get; set; }

        /// <summary>Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming Tekens gecodeerd volgens de UTF-8 standaard</summary>
        [Newtonsoft.Json.JsonProperty("naamOpenbareRuimte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NaamOpenbareRuimte { get; set; }

        /// <summary>De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer</summary>
        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[1-9]{1}[0-9]{3}[A-Z]{2}$")]
        public string Postcode { get; set; }

        /// <summary>De door het bevoegde gemeentelijke orgaan aan een WOONPLAATS toegekende benaming. Tekens gecodeerd volgens de UTF-8 standaard.</summary>
        [Newtonsoft.Json.JsonProperty("woonplaatsnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Woonplaatsnaam { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over het verblijf en adres van de ingeschreven persoon. Dit is het adres waarop een persoon is ingeschreven. 
    /// * **datumAanvangAdreshuishouding** : De datum van aangifte of ambtshalve melding van verblijf en adres. 
    /// * **datumIngangGeldigheid** : Datum waarop de gegevens over de verblijfplaats geldig zijn geworden. 
    /// * **datumInschrijvingInGemeente**: Bij inschrijving op grond van een aangifte door de burger van zijn vestiging in een (volgende) gemeente is dit de aangiftedatum. Bij inschrijving op grond van een geboorteakte is dit de geboortedatum. Bij ambtshalve inschrijving is dit de datum waarop de betrokkene schriftelijk van het voornemen van ambtshalve opneming mededeling is gedaan. 
    /// * **datumVestigingInNederland** : Datum van inschrijving in Nederland 
    /// * **landVanWaarIngeschreven** : Het land waar de ingeschreven persoon verblijf hield voor (her)vestiging in Nederland. 
    /// * **gemeenteVanInschrijving** : Een aanduiding die aangeeft in welke gemeente de PK zich bevindt. De code kan voorloopnullen bevatten 
    /// * **landVanWaarIngeschreven** : Het LAND waar de INGESCHREVEN PERSOON verblijf hield voor (her)vestiging in Nederland.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Verblijfplaats : BinnenlandsAdres
    {
        /// <summary>Een verblijfplaats kan een ligplaats, een standplaats of een verblijfsobject in een of meerdere panden zijn, waaraan respectievelijk een ligplaatsidentificatie, standplaatsidentificatie of verblijfsobjectidentificatie is toegekend. De Identificatiecode verblijfplaats is een combinatie van een viercijferige gemeentecode, een tweecijferige objecttypecode die aangeeft of de aanduiding een verblijfsobject (01), ligplaats (02) of standplaats (03) betreft en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig volgnummer. Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'.</summary>
        [Newtonsoft.Json.JsonProperty("identificatiecodeAdresseerbaarObject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string IdentificatiecodeAdresseerbaarObject { get; set; }

        /// <summary>Indicatie waarmee aangegeven wordt of de ingeschreven persoon zich vanuit het buitenland heeftingeschreven. Deze indicatie heeft als rol om aan te geven dat iemand zich vanuit het buitenland gevestigd heeft. Deze indicator wordt altijd meegeleverd als de waarde true is. Als de waarde false is wordt de indicator niet meegeleverd.</summary>
        [Newtonsoft.Json.JsonProperty("indicatieVestigingVanuitBuitenland", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IndicatieVestigingVanuitBuitenland { get; set; }

        /// <summary>Een geheel of gedeeltelijke omschrijving van de ligging van een object.</summary>
        [Newtonsoft.Json.JsonProperty("locatiebeschrijving", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Locatiebeschrijving { get; set; }

        /// <summary>De officiële straatnaam zoals door het bevoegd gemeentelijk orgaan is vastgesteld, zo nodig ingekort conform de specificaties van de NEN 5825. alle alfanumrieke tekens</summary>
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string Straatnaam { get; set; }

        /// <summary>Indicatie waarmee aangegeven wordt dat de persoon is teruggekeerd uit een situatie van vertrokken onbekend waarheen</summary>
        [Newtonsoft.Json.JsonProperty("vanuitVertrokkenOnbekendWaarheen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool VanuitVertrokkenOnbekendWaarheen { get; set; }

        [Newtonsoft.Json.JsonProperty("datumAanvangAdreshouding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumAanvangAdreshouding { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangGeldigheid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangGeldigheid { get; set; }

        [Newtonsoft.Json.JsonProperty("datumInschrijvingInGemeente", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumInschrijvingInGemeente { get; set; }

        [Newtonsoft.Json.JsonProperty("datumVestigingInNederland", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumVestigingInNederland { get; set; }

        [Newtonsoft.Json.JsonProperty("gemeenteVanInschrijving", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel GemeenteVanInschrijving { get; set; }

        [Newtonsoft.Json.JsonProperty("landVanwaarIngeschreven", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel LandVanwaarIngeschreven { get; set; }

        [Newtonsoft.Json.JsonProperty("verblijfBuitenland", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VerblijfBuitenland VerblijfBuitenland { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VerblijfplaatsInOnderzoek InOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>De gegevens over het verblijf in het buitenland</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VerblijfBuitenland
    {
        /// <summary>Het eerste deel van het adres in het buitenland dat de ingeschreven persoon opgeeft bij vertrek naar het buitenland dan wel waar de ingeschreven persoon in het buitenland verblijft.</summary>
        [Newtonsoft.Json.JsonProperty("adresRegel1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AdresRegel1 { get; set; }

        /// <summary>Het tweede deel van het adres in het buitenland dat de ingeschreven persoon opgeeft bij vertrek naar het buitenland dan wel waar de ingeschreven persoon in het buitenland verblijft.</summary>
        [Newtonsoft.Json.JsonProperty("adresRegel2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AdresRegel2 { get; set; }

        /// <summary>Het derde deel van het adres in het buitenland dat de ingeschreven persoon opgeeft bij vertrek naar het buitenland dan wel waar de ingeschreven persoon in het buitenland verblijft.</summary>
        [Newtonsoft.Json.JsonProperty("adresRegel3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AdresRegel3 { get; set; }

        /// <summary>Indicatie dat de ingeschreven persoon is vertrokken naar het buitenland, maar dat niet bekend is waar naar toe.</summary>
        [Newtonsoft.Json.JsonProperty("vertrokkenOnbekendWaarheen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool VertrokkenOnbekendWaarheen { get; set; }

        [Newtonsoft.Json.JsonProperty("land", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel Land { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Indicators om aan te geven dat de gegevens over het verblijf en adres van de INGESCHREVEN NATUURLIJK PERSOON in onderzoek zijn. Elementen van het GBA-adres zelf (Dat zou eigenlijk een BAG-adres moeten zijn) kunnen niet in onderzoek zijn. Wel de relatie naar de nummeraanduding. Dat wordt gedaan door de identificatiecodeNummeraanduiding in onderzoek te zetten. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/in_onderzoek.feature)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VerblijfplaatsInOnderzoek
    {
        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("aanduidingBijHuisnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AanduidingBijHuisnummer { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("datumAanvangAdreshouding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DatumAanvangAdreshouding { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("datumIngangGeldigheid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DatumIngangGeldigheid { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("datumInschrijvingInGemeente", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DatumInschrijvingInGemeente { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("datumVestigingInNederland", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DatumVestigingInNederland { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("functieAdres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FunctieAdres { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("gemeenteVanInschrijving", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GemeenteVanInschrijving { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("huisletter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Huisletter { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Huisnummer { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("huisnummertoevoeging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Huisnummertoevoeging { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("identificatiecodeNummeraanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IdentificatiecodeNummeraanduiding { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("identificatiecodeAdresseerbaarObject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IdentificatiecodeAdresseerbaarObject { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("landVanwaarIngeschreven", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LandVanwaarIngeschreven { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("locatiebeschrijving", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Locatiebeschrijving { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("naamOpenbareRuimte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool NaamOpenbareRuimte { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Postcode { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Straatnaam { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("verblijfBuitenland", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool VerblijfBuitenland { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("woonplaatsnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Woonplaatsnaam { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens betreffende het gezag over de ingeschrevene.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Gezagsverhouding
    {
        /// <summary>Een aanduiding dat de ingeschrevene onder curatele is gesteld.</summary>
        [Newtonsoft.Json.JsonProperty("indicatieCurateleRegister", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IndicatieCurateleRegister { get; set; }

        [Newtonsoft.Json.JsonProperty("indicatieGezagMinderjarige", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IndicatieGezagMinderjarige_enum IndicatieGezagMinderjarige { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GezagsverhoudingInOnderzoek InOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een groep van booleans om aan te geven welke gegevens van de gezagsverhouding in onderzoek zijn. Als een de categorie in onderzoek is worden alle rubrieken binnen die categorie op _true_ gezet. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/in_onderzoek.feature)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GezagsverhoudingInOnderzoek
    {
        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("indicatieCurateleRegister", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IndicatieCurateleRegister { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("indicatieGezagMinderjarige", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IndicatieGezagMinderjarige { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over de verblijfsrechtelijke status van de ingeschrevene. 
    /// * **datumEinde**: Datum waarop de geldigheid van de gegevens over de verblijfstitel is beeindigd. 
    /// * **datumIngang**: Datum waarop de gegevens over de verblijfstitel geldig zijn geworden. 
    /// * **aanduiding** : Verblijfstiteltabel, die aangeeft over welke verblijfsrechtelijke status de ingeschrevene beschikt.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Verblijfstitel
    {
        [Newtonsoft.Json.JsonProperty("aanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel Aanduiding { get; set; }

        [Newtonsoft.Json.JsonProperty("datumEinde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumEinde { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngang", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngang { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VerblijfstitelInOnderzoek InOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>In onderzoek indicators over de gegevens over de verblijfstitel.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VerblijfstitelInOnderzoek
    {
        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze verblijfstitel in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("aanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Aanduiding { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze verblijfstitel in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("datumEinde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DatumEinde { get; set; }

        /// <summary>Indicator die aangeeft of het corresponderende gegeven voor deze verblijfstitel in onderzoek is.</summary>
        [Newtonsoft.Json.JsonProperty("datumIngang", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DatumIngang { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IngeschrevenPersoon_links
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink Self { get; set; }

        /// <summary>De ouders van de ingeschreven persoon, waarnaar de OUDER-KIND-RELATIE verwijst`</summary>
        [Newtonsoft.Json.JsonProperty("ouders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<HalLink> Ouders { get; set; }

        /// <summary>De ingezetene waaraan het REISDOCUMENT is verstrekt. Dit is de inverse relatie van heeftAlsHouder. Reisdocumenten die aan een ingezetene zijn verstrekt.</summary>
        [Newtonsoft.Json.JsonProperty("reisdocumenten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HalLink> Reisdocumenten { get; set; }

        /// <summary>De kinderen van de ingeschreven persoon, waarnaar de KIND-OUDER-RELATIE verwijst</summary>
        [Newtonsoft.Json.JsonProperty("kinderen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HalLink> Kinderen { get; set; }

        /// <summary>De actuele bij de ingeschreven persoon geregistreerde huwelijken en geregistreerd partnerschappen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet teruggegeven.</summary>
        [Newtonsoft.Json.JsonProperty("partners", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HalLink> Partners { get; set; }

        [Newtonsoft.Json.JsonProperty("partnerhistorie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink Partnerhistorie { get; set; }

        [Newtonsoft.Json.JsonProperty("verblijfplaatshistorie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink Verblijfplaatshistorie { get; set; }

        [Newtonsoft.Json.JsonProperty("verblijfstitelhistorie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink Verblijfstitelhistorie { get; set; }

        [Newtonsoft.Json.JsonProperty("nationaliteitHistorie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink NationaliteitHistorie { get; set; }

        [Newtonsoft.Json.JsonProperty("verblijfplaatsNummeraanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink VerblijfplaatsNummeraanduiding { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Ouder_links
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink Self { get; set; }

        [Newtonsoft.Json.JsonProperty("ingeschrevenPersoon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink IngeschrevenPersoon { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Kind_links
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink Self { get; set; }

        [Newtonsoft.Json.JsonProperty("ingeschrevenPersoon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink IngeschrevenPersoon { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Partner_links
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink Self { get; set; }

        [Newtonsoft.Json.JsonProperty("ingeschrevenPersoon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink IngeschrevenPersoon { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IngeschrevenPersoon_embedded
    {
        /// <summary>De ouders van de ingeschreven persoon, waarnaar de OUDER-KIND-RELATIE verwijst`</summary>
        [Newtonsoft.Json.JsonProperty("ouders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<OuderHal> Ouders { get; set; }

        /// <summary>De kinderen van de ingeschreven persoon, waarnaar de KIND-OUDER-RELATIE verwijst</summary>
        [Newtonsoft.Json.JsonProperty("kinderen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<KindHal> Kinderen { get; set; }

        /// <summary>De actuele bij de ingeschreven persoon geregistreerde huwelijken en geregistreerd partnerschappen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet teruggegeven.</summary>
        [Newtonsoft.Json.JsonProperty("partners", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PartnerHal> Partners { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>De aanduiding van het bijzonder Nederlanderschap:
    /// * `behandeld_als_nederlander` - B
    /// * `vastgesteld_niet_nederlander` - V</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AanduidingBijzonderNederlanderschap_enum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"behandeld_als_nederlander")]
        Behandeld_als_nederlander = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"vastgesteld_niet_nederlander")]
        Vastgesteld_niet_nederlander = 1,

    }

    /// <summary>De aanduiding die wordt gebruikt voor adressen die niet zijn voorzien van de gebruikelijke straatnaam en huisnummeraanduidingen.:
    /// * `tegenover` - to
    /// * `bij` - by</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AanduidingBijHuisnummer_enum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tegenover")]
        Tegenover = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"bij")]
        Bij = 1,

    }

    /// <summary>Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is:
    /// * `man` - M
    /// * `vrouw` - V
    /// * `onbekend` - O</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Geslacht_enum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"man")]
        Man = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"vrouw")]
        Vrouw = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"onbekend")]
        Onbekend = 2,

    }

    /// <summary>Een aanduiding die aangeeft wie belast is met het gezag over de minderjarige ingeschrevene.:
    /// * `ouder1` - 1
    /// * `ouder2` - 2
    /// * `derden` - D
    /// * `ouder1_en_derde` - 1D
    /// * `ouder2_en_derde` - 2D
    /// * `ouder1_en_ouder2` - 12</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IndicatieGezagMinderjarige_enum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ouder1")]
        Ouder1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ouder2")]
        Ouder2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"derden")]
        Derden = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ouder1_en_derde")]
        Ouder1_en_derde = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ouder2_en_derde")]
        Ouder2_en_derde = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ouder1_en_ouder2")]
        Ouder1_en_ouder2 = 5,

    }

    /// <summary>De voorgedefinieerde waarden van naamgebruik volgens de centrale voorzieningen.
    /// * `eigen` - E
    /// * `eigen_partner` - N
    /// * `partner` - P
    /// * `partner_eigen` - V</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Naamgebruik_enum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"eigen")]
        Eigen = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"eigen_partner")]
        Eigen_partner = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"partner")]
        Partner = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"partner_eigen")]
        Partner_eigen = 3,

    }

    /// <summary>Aanduiding om welke ouder het gaat volgens de GBA:
    /// * `ouder1` - 1
    /// * `ouder2` - 2</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OuderAanduiding_enum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ouder1")]
        Ouder1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ouder2")]
        Ouder2 = 1,

    }

    /// <summary>Redenen voor opschorting van de bijhouding.:
    /// * `overlijden` - O
    /// * `emigratie` - E
    /// * `ministerieel_besluit` - M
    /// * `pl_aangelegd_in_de_rni` - R
    /// * `fout` - F</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RedenOpschortingBijhouding_enum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"overlijden")]
        Overlijden = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"emigratie")]
        Emigratie = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ministerieel_besluit")]
        Ministerieel_besluit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"pl_aangelegd_in_de_rni")]
        Pl_aangelegd_in_de_rni = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"fout")]
        Fout = 4,

    }

    /// <summary>Aanduiding van het soort adres.:
    /// * `woonadres` - W
    /// * `briefadres` - B</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SoortAdres_enum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"woonadres")]
        Woonadres = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"briefadres")]
        Briefadres = 1,

    }

    /// <summary>Soort verbintenis van een bij de burgerlijke stand ingeschreven verbintenis:
    /// * `huwelijk` - H
    /// * `geregistreerd_partnerschap` - P</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SoortVerbintenis_enum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"huwelijk")]
        Huwelijk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"geregistreerd_partnerschap")]
        Geregistreerd_partnerschap = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VerblijfplaatshistorieHalCollectie
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalCollectionLinks _links { get; set; }

        [Newtonsoft.Json.JsonProperty("_embedded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VerblijfplaatshistorieHalCollectie__embedded _embedded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VerblijfplaatshistorieHal : Verblijfplaatshistorie
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Verblijfplaatshistorie_links _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>&lt;body&gt;&lt;p&gt;Gegevens over het verblijf en adres van de ingeschreven persoon. Dit is het adres waarop een persoon is ingeschreven of ingeschreven is geweest.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datumAanvangAdreshuishouding** : De datum van aangifte of ambtshalve melding van verblijf en adres.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datumIngangGeldigheid** : Datum waarop de gegevens over de verblijfplaats geldig zijn geworden.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datumInschrijvingInGemeente**: Bij inschrijving op grond van een aangifte door de burger van zijn vestiging in een (volgende) gemeente is dit de aangiftedatum. Bij inschrijving op grond van een geboorteakte is dit de geboortedatum. Bij ambtshalve inschrijving is dit de datum waarop de betrokkene schriftelijk van het voornemen van ambtshalve opneming mededeling is gedaan.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datumVestigingInNederland** : Datum van inschrijving in Nederland&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; landVanWaarIngeschreven** : Het land waar de ingeschreven persoon verblijf hield voor (her)vestiging in Nederland.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; gemeenteVanInschrijving** : Een aanduiding die aangeeft in welke gemeente de PK zich bevindt. De code kan voorloopnullen bevatten&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; landVanWaarIngeschreven** : Het LAND waar de INGESCHREVEN PERSOON verblijf hield voor (her)vestiging in Nederland.&lt;/p&gt;&lt;/body&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Verblijfplaatshistorie : Verblijfplaats
    {
        [Newtonsoft.Json.JsonProperty("datumTot", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DatumTot DatumTot { get; set; }

        /// <summary>Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.</summary>
        [Newtonsoft.Json.JsonProperty("geheimhoudingPersoonsgegevens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GeheimhoudingPersoonsgegevens { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Verblijfplaatshistorie_links
    {
        [Newtonsoft.Json.JsonProperty("nummeraanduiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink Nummeraanduiding { get; set; }

        [Newtonsoft.Json.JsonProperty("adresseerbaarObject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink AdresseerbaarObject { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PartnerhistorieHalCollectie
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalCollectionLinks _links { get; set; }

        [Newtonsoft.Json.JsonProperty("_embedded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartnerhistorieHalCollectie__embedded _embedded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PartnerhistorieHal : Partnerhistorie
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Partnerhistorie_links _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>&lt;body&gt;&lt;p&gt;Gegevens over een gesloten huwelijk/geregistreerd partnerschap van de ingeschrevene.&lt;/p&gt;&lt;/body&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Partnerhistorie : Partner
    {
        [Newtonsoft.Json.JsonProperty("ontbindingHuwelijkPartnerschap", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OntbindingHuwelijkPartnerschap OntbindingHuwelijkPartnerschap { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OntbindingHuwelijkPartnerschap
    {
        /// <summary>Indicatie of het huwelijk ontbonden is danwel het partnerschap beeindigd is.
        /// * `True` - Huwelijk/Partnerschap is beeindigd.</summary>
        [Newtonsoft.Json.JsonProperty("indicatieHuwelijkPartnerschapBeeindigd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IndicatieHuwelijkPartnerschapBeeindigd { get; set; }

        [Newtonsoft.Json.JsonProperty("datum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig Datum { get; set; }

        [Newtonsoft.Json.JsonProperty("land", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel Land { get; set; }

        [Newtonsoft.Json.JsonProperty("plaats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel Plaats { get; set; }

        [Newtonsoft.Json.JsonProperty("reden", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Waardetabel Reden { get; set; }

        [Newtonsoft.Json.JsonProperty("inOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OntbindingHuwelijkInOnderzoek InOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>&lt;body&gt;&lt;p&gt;Indicators over het in onderzoek zijn van gegevens over de aangaan van het huwelijk van de INGESCHREVEN PERSOON.&lt;/p&gt;&lt;p&gt;Zie de &lt;a href=`https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/in_onderzoek.feature`&gt; functionele specificaties &lt;a&gt;&lt;/p&gt;&lt;/body&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OntbindingHuwelijkInOnderzoek
    {
        /// <summary>&lt;body&gt;&lt;p&gt;Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.&lt;/p&gt;&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("datum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Datum { get; set; }

        /// <summary>&lt;body&gt;&lt;p&gt;Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.&lt;/p&gt;&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("land", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Land { get; set; }

        /// <summary>&lt;body&gt;&lt;p&gt;Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.&lt;/p&gt;&lt;/body&gt;</summary>
        [Newtonsoft.Json.JsonProperty("plaats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Plaats { get; set; }

        [Newtonsoft.Json.JsonProperty("datumIngangOnderzoek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Partnerhistorie_links
    {
        [Newtonsoft.Json.JsonProperty("ingeschrevenPersoon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink IngeschrevenPersoon { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VerblijfstitelhistorieHalCollectie
    {
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalCollectionLinks _links { get; set; }

        [Newtonsoft.Json.JsonProperty("_embedded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VerblijfstitelhistorieHalCollectie__embedded _embedded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>&lt;body&gt;&lt;p&gt;Gegevens over de verblijfsrechtelijke status van de ingeschrevene.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datumEinde**: Datum waarop de geldigheid van de gegevens over de verblijfstitel is beeindigd.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datumIngang**: Datum waarop de gegevens over de verblijfstitel geldig zijn geworden.&lt;/p&gt;&lt;p&gt; &lt;em&gt;*&lt;/em&gt; aanduiding** : Verblijfstiteltabel, die aangeeft over welke verblijfsrechtelijke status de ingeschrevene beschikt.&lt;/p&gt; &lt;/body&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Verblijfstitelhistorie : Verblijfstitel
    {
        /// <summary>Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.</summary>
        [Newtonsoft.Json.JsonProperty("geheimhoudingPersoonsgegevens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GeheimhoudingPersoonsgegevens { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>&lt;body&gt;&lt;p&gt;Gegevens over de geboorte van respectievelijk de persoon, de ouder, de echtgenoot/geregistreerd partner, de eerdere echtgenoot/geregistreerd partner of het kind.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; datum** : Datum waarop de persoon is geboren.&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; land** : Land waar de persoon is geboren&lt;/p&gt;&lt;p&gt;
    ///  &lt;em&gt;*&lt;/em&gt; plaats** : De plaats waar een persoon is geboren. Voor een plaats buiten Nederland is gemeentecode=1999 (RNI) en gemeentenaam de buitenlandse plaatsnaam of aanduiding.&lt;/p&gt;&lt;/body&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Geboortedatum
    {
        [Newtonsoft.Json.JsonProperty("datum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datum_onvolledig Datum { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BadRequestFoutbericht : Foutbericht
    {
        /// <summary>Foutmelding per fout in een parameter. Alle gevonden fouten worden één keer teruggemeld.</summary>
        [Newtonsoft.Json.JsonProperty("invalidParams", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InvalidParams> InvalidParams { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Terugmelding bij een fout. JSON representatie in lijn met [RFC7807](https://tools.ietf.org/html/rfc7807).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Foutbericht
    {
        /// <summary>Link naar meer informatie over deze fout</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        /// <summary>Beschrijving van de fout</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>Http status code</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        /// <summary>Details over de fout</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        /// <summary>Uri van de aanroep die de fout heeft veroorzaakt</summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        /// <summary>Systeemcode die het type fout aangeeft</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Details over fouten in opgegeven parameters</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InvalidParams
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        /// <summary>Naam van de parameter</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Systeemcode die het type fout aangeeft</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Code { get; set; }

        /// <summary>Beschrijving van de fout op de parameterwaarde</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Gegevens over de datums die mogelijk niet volledig zijn, maar waarvan de bekende gedeeltes wel moeten kunnen worden uitgewisseld. Als de volledige datum bekend is worden alle elementen gevuld.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Datum_onvolledig
    {
        /// <summary>De dag. Als de dag van de datum bekend is wordt deze hier ingevuld. Ook als de volledige datum bekend is.</summary>
        [Newtonsoft.Json.JsonProperty("dag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 31)]
        public int Dag { get; set; }

        /// <summary>De volledige datum die in de `date` definitie past. Dit element wordt alleen gevuld als de volledige datum bekend is.</summary>
        [Newtonsoft.Json.JsonProperty("datum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Datum { get; set; }

        /// <summary>Het jaar van de datum. Als het jaar bekend is wordt dit element gevuld, ook als de volledige datum bekend is.</summary>
        [Newtonsoft.Json.JsonProperty("jaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(int.MinValue, 9999)]
        public int Jaar { get; set; }

        /// <summary>De maand. Als de maand van een datum bekend is wordt deze hier ingevuld. Ook als de volledige datum is ingevuld.</summary>
        [Newtonsoft.Json.JsonProperty("maand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int Maand { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HalCollectionLinks
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HalLink Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>De Link Object zoals gespecificeerd in https://tools.ietf.org/html/draft-kelly-json-hal-08#section-5</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HalLink
    {
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("templated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Templated { get; set; }

        /// <summary>Voor mens leesbaar label bij de link</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Generieke tabel met waarden om een code en omschrijving op te nemen.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Waardetabel
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>Voor mensen leesbare omschrijving van de waarde.</summary>
        [Newtonsoft.Json.JsonProperty("omschrijving", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Omschrijving { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IngeschrevenPersoonHalCollectie__embedded
    {
        [Newtonsoft.Json.JsonProperty("ingeschrevenpersonen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IngeschrevenPersoonHal> Ingeschrevenpersonen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OuderHalCollectie__embedded
    {
        [Newtonsoft.Json.JsonProperty("ouders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OuderHal> Ouders { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KindHalCollectie__embedded
    {
        [Newtonsoft.Json.JsonProperty("kinderen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<KindHal> Kinderen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PartnerHalCollectie__embedded
    {
        [Newtonsoft.Json.JsonProperty("partners", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PartnerHal> Partners { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NationaliteithistorieHalCollectie__embedded
    {
        [Newtonsoft.Json.JsonProperty("nationaliteithistorie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Nationaliteithistorie> Nationaliteithistorie { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VerblijfplaatshistorieHalCollectie__embedded
    {
        [Newtonsoft.Json.JsonProperty("verblijfplaatshistorie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VerblijfplaatshistorieHal> Verblijfplaatshistorie { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PartnerhistorieHalCollectie__embedded
    {
        [Newtonsoft.Json.JsonProperty("partnerhistorie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PartnerhistorieHal> Partnerhistorie { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VerblijfstitelhistorieHalCollectie__embedded
    {
        [Newtonsoft.Json.JsonProperty("verblijfstitelhistorie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Verblijfstitelhistorie> Verblijfstitelhistorie { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DatumTot : Datum_onvolledig
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v11.0.0.0)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108